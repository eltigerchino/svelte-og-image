diff --git a/dist/index.edge.js b/dist/index.edge.js
index 089354ce4b62dde0fed3482e028ffade3d34b750..e22453fe8ade3f5150eedcd32e4bbd7c58f91b14 100644
--- a/dist/index.edge.js
+++ b/dist/index.edge.js
@@ -18980,23 +18980,13 @@ function assertValue(v, errorMessage) {
 // src/index.edge.ts
 var initializedResvg = initWasm(resvg_wasm);
 var initializedYoga = initYoga(yoga_wasm).then((yoga2) => Rl(yoga2));
-var fallbackFont = fetch(new URL("./noto-sans-v27-latin-regular.ttf", import.meta.url)).then((res) => res.arrayBuffer());
 var ImageResponse = class extends Response {
   constructor(element, options = {}) {
     const result = new ReadableStream({
       async start(controller) {
         await initializedYoga;
         await initializedResvg;
-        const fontData = await fallbackFont;
-        const fonts = [
-          {
-            name: "sans serif",
-            data: fontData,
-            weight: 700,
-            style: "normal"
-          }
-        ];
-        const result2 = await render(wl, resvg_wasm_exports, options, fonts, element);
+        const result2 = await render(wl, resvg_wasm_exports, options, [], element);
         controller.enqueue(result2);
         controller.close();
       }
diff --git a/dist/types.d.ts b/dist/types.d.ts
index aba1429ce82752da7d345884fc4b357fe2a2b79f..03100321a12b0bae6096a93df32e37dc68be5c22 100644
--- a/dist/types.d.ts
+++ b/dist/types.d.ts
@@ -4,7 +4,8 @@
 import type { SatoriOptions } from 'satori';
 import type { EmojiType } from './emoji';
 import type { OutgoingHttpHeader } from 'http';
-declare type ImageOptions = {
+export type { SatoriOptions, EmojiType };
+export interface ImageOptions {
     /**
      * The width of the image.
      *
@@ -41,13 +42,13 @@ declare type ImageOptions = {
      * @default 'twemoji'
      */
     emoji?: EmojiType;
-};
-export declare type ImageResponseNodeOptions = ImageOptions & {
+}
+export interface ImageResponseNodeOptions extends ImageOptions {
     status?: number;
     statusText?: string;
     headers?: OutgoingHttpHeader[];
-};
-export declare type ImageResponseOptions = ImageOptions & ConstructorParameters<typeof Response>[1];
+}
+export type ImageResponseOptions = ImageOptions & ConstructorParameters<typeof Response>[1];
 export interface FigmaImageResponseProps {
     /**
      * Link to the Figma template frame.
@@ -92,7 +93,7 @@ export interface FigmaComplexTemplate {
 }
 declare type Weight = 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;
 declare type Style = 'normal' | 'italic';
-interface FontOptions {
+export interface FontOptions {
     data: Buffer | ArrayBuffer;
     name: string;
     weight?: Weight;
diff --git a/package.json b/package.json
index fb4338ec5c43b53dea8371932c2de31f80470c3d..24013ad43c0add1bec6c573f73f8c968e6fde76b 100644
--- a/package.json
+++ b/package.json
@@ -40,6 +40,9 @@
       },
       "default": "./dist/index.node.js"
     },
+    "./types": {
+      "types": "./dist/types.d.ts"
+    },
     "./package.json": "./package.json"
   },
   "scripts": {
